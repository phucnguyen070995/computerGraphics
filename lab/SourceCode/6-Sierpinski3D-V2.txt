#include <windows.h>
#include <GL/glut.h>

GLfloat colors[4][3] = {{1, 1, 0}, {0, 1, 0}, {0, 0, 1}, {1, 0, 0}};

int n;
void triangle( GLfloat *a, GLfloat *b, GLfloat *c){
  glVertex3fv(a);
  glVertex3fv(b);
  glVertex3fv(c);
}
void tetra(GLfloat *a, GLfloat *b, GLfloat *c, GLfloat *d){
    glColor3fv(colors[0]);
    triangle(b, d, c);
    glColor3fv(colors[1]);
    triangle(a, b, c);
    glColor3fv(colors[2]);
    triangle(a, c, d);
    glColor3fv(colors[3]);
    triangle(a, d, b);
}
void divide_tetra(GLfloat *a, GLfloat *b, GLfloat *c, GLfloat *d, int m){
    GLfloat mid[6][3];
    int j;
    if(m>0)    {
		for(j=0; j<3; j++) mid[0][j]=(a[j]+b[j])/2;
		for(j=0; j<3; j++) mid[1][j]=(b[j]+c[j])/2;
		for(j=0; j<3; j++) mid[2][j]=(c[j]+a[j])/2;
		for(j=0; j<3; j++) mid[3][j]=(a[j]+d[j])/2;
		for(j=0; j<3; j++) mid[4][j]=(b[j]+d[j])/2;
		for(j=0; j<3; j++) mid[5][j]=(c[j]+d[j])/2;

		divide_tetra(a, mid[0], mid[2], mid[3], m-1);
		divide_tetra(b, mid[0], mid[1], mid[4], m-1);
		divide_tetra(c, mid[1], mid[2], mid[5], m-1);
		divide_tetra(d, mid[3], mid[4], mid[5], m-1);
	}
    else(tetra(a,b,c,d)); /* draw tetrahedron at end of recursion */
}


void mydisplay(){
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    GLfloat a[3] = {0, 0, 0};
    GLfloat b[3] = {1, 0, 0};
    GLfloat c[3] = {0, 1, 0};
    GLfloat d[3] = {0, 0, 1};

    glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(-1, -1, -1, 0, 0, 0, 0, 1, 0);

	glBegin(GL_TRIANGLES);
       divide_tetra(a, b, c, d, n);
    glEnd();

    glFlush();
}
void init()
{
    glClearColor(1.0, 1.0, 1.0, 1.0); /* white background */
    glColor3f(1.0, 0.0, 0.0); /* draw in red */
    glEnable(GL_DEPTH_TEST);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-1.0, 1.0, -1.0, 1.0, 0.1, 1000.0);
}
int main(int argc, char *argv[])
{
    n = 4;
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("Sierpinski 3D - Version 2");
    glutDisplayFunc(mydisplay);

    init();

    glutMainLoop();
}
